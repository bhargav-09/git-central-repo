input {
        s3{
                access_key_id => "hiubfiufaihofigrei"
                secret_access_key => "hjjhvjjvbjavlbaebvjrblbv"
                region => "ap-south-1"
                type => "api"
                bucket => "m-paas-elb-api"
                prefix => "2020/AWSLogs/828388064844/elasticloadbalancing/ap-south-1/2021"

        }
                s3{
                access_key_id => "hiubfiufaihofigrei"
                secret_access_key => "hjjhvjjvbjavlbaebvjrblbv"
                region => "ap-south-1"
                type => "api"
                bucket => "m-paas-mmtv-elb-api"
                prefix => "AWSLogs/828388064844/elasticloadbalancing/ap-south-1/2021"

        }

       s3{
                access_key_id => "hiubfiufaihofigrei"
                secret_access_key => "hjjhvjjvbjavlbaebvjrblbv"
                region => "ap-south-1"
                type => "api"
                bucket => "m-paas-shreyaset-elb-api"
                prefix => "2020/AWSLogs/828388064844/elasticloadbalancing/ap-south-1/2021"

        }
      
       s3{
                access_key_id => "hiubfiufaihofigrei"
                secret_access_key => "hjjhvjjvbjavlbaebvjrblbv"
                region => "ap-south-1"
                type => "api"
                bucket => "m-paas-rgvworld-elb-api"
                prefix => "2020/AWSLogs/828388064844/elasticloadbalancing/ap-south-1/2021"

        }

         s3{
                access_key_id => "hiubfiufaihofigrei"
                secret_access_key => "hjjhvjjvbjavlbaebvjrblbv"
                region => "ap-south-1"
                type => "api"
                bucket => "m-paas-apexott-elb-api"
                prefix => "AWSLogs/828388064844/elasticloadbalancing/ap-south-1/2021"

        }


       s3{
                access_key_id => "hiubfiufaihofigrei"
                secret_access_key => "hjjhvjjvbjavlbaebvjrblbv"
                region => "ap-south-1"
                type => "smsv2"
                bucket => "m-paas-elb-smsv2"
                prefix => "2020/AWSLogs/828388064844/elasticloadbalancing/ap-south-1/2021"

        }
        s3{
                access_key_id => "hiubfiufaihofigrei"
                secret_access_key => "hjjhvjjvbjavlbaebvjrblbv""
                region => "ap-south-1"
                type => "contentstore"
                bucket => "m-paas-elb-cst"
                prefix => "2020/AWSLogs/828388064844/elasticloadbalancing/ap-south-1/2021"

        }

        s3{
                access_key_id => "hiubfiufaihofigrei"
                secret_access_key => "hjjhvjjvbjavlbaebvjrblbv"
                region => "ap-south-1"
                type => "pwa_mmtv"
                bucket => "m-paas-mmtv-elb-pwa"
                prefix => "AWSLogs/828388064844/elasticloadbalancing/ap-south-1/2021"

        }



}
filter {

    if [type] == "api" {
        grok {
            match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:loadbalancer} %{IP:client_ip}:%{NUMBER:client_port:int} (?:%{IP:backend_ip}:%{NUMBER:backend_port:int}|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:%{NUMBER:elb_status_code:int}|-) (?:%{NUMBER:backend_status_code:int}|-) %{NUMBER:received_bytes:int} %{NUMBER:sent_bytes:int} \"(?:%{WORD:verb}|-) (?:%{GREEDYDATA:request}|-) (?:HTTP/%{NUMBER:httpversion}|-( )?)\" \"%{DATA:userAgent}\"( %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol})?" ]
        }

        grok {
           match => [ "request", "%{URIPROTO:uri_proto}://(?:%{USER:user}(?::[^@]*)?@)?(?:%{URIHOST:uri_domain})?(?:%{URIPATHPARAM:uri_param})?" ]
         }
        if "?" in [uri_param] {
         grok {
           match => [ "uri_param", "%{GREEDYDATA:uri_path}\?%{GREEDYDATA:uri_query}" ]
          }
        }
        if !("?" in [uri_param])  {
        mutate{
                add_field => {"uri_path" => "%{uri_param}"}
        }
        }
        useragent {
         source => "userAgent"
        }
        geoip {
          source => "client_ip"
          target => "geoip"
          add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
          convert => [ "[geoip][coordinates]", "float"]
        }
        date {
            match => [ "timestamp", "ISO8601" ]
        }

   }

if [type] == "smsv2" {
        grok {
            match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:loadbalancer} %{IP:client_ip}:%{NUMBER:client_port:int} (?:%{IP:backend_ip}:%{NUMBER:backend_port:int}|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:%{NUMBER:elb_status_code:int}|-) (?:%{NUMBER:backend_status_code:int}|-) %{NUMBER:received_bytes:int} %{NUMBER:sent_bytes:int} \"(?:%{WORD:verb}|-) (?:%{GREEDYDATA:request}|-) (?:HTTP/%{NUMBER:httpversion}|-( )?)\" \"%{DATA:userAgent}\"( %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol})?" ]
        }

        grok {
           match => [ "request", "%{URIPROTO:uri_proto}://(?:%{USER:user}(?::[^@]*)?@)?(?:%{URIHOST:uri_domain})?(?:%{URIPATHPARAM:uri_param})?" ]
         }
        if "?" in [uri_param] {
         grok {
           match => [ "uri_param", "%{GREEDYDATA:uri_path}\?%{GREEDYDATA:uri_query}" ]
          }
        }
        if !("?" in [uri_param])  {
        mutate{
                add_field => {"uri_path" => "%{uri_param}"}
        }
        }
        useragent {
         source => "userAgent"
        }
        geoip {
          source => "client_ip"
          target => "geoip"
          add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
          convert => [ "[geoip][coordinates]", "float"]
        }
        date {
            match => [ "timestamp", "ISO8601" ]
        }

   }

if [type] == "contentstore" {
        grok {
            match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:loadbalancer} %{IP:client_ip}:%{NUMBER:client_port:int} (?:%{IP:backend_ip}:%{NUMBER:backend_port:int}|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:%{NUMBER:elb_status_code:int}|-) (?:%{NUMBER:backend_status_code:int}|-) %{NUMBER:received_bytes:int} %{NUMBER:sent_bytes:int} \"(?:%{WORD:verb}|-) (?:%{GREEDYDATA:request}|-) (?:HTTP/%{NUMBER:httpversion}|-( )?)\" \"%{DATA:userAgent}\"( %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol})?" ]
        }

        grok {
           match => [ "request", "%{URIPROTO:uri_proto}://(?:%{USER:user}(?::[^@]*)?@)?(?:%{URIHOST:uri_domain})?(?:%{URIPATHPARAM:uri_param})?" ]
         }
        if "?" in [uri_param] {
         grok {
           match => [ "uri_param", "%{GREEDYDATA:uri_path}\?%{GREEDYDATA:uri_query}" ]
          }
        }
        if !("?" in [uri_param])  {
        mutate{
                add_field => {"uri_path" => "%{uri_param}"}
        }
        }
        useragent {
         source => "userAgent"
        }
        geoip {
          source => "client_ip"
          target => "geoip"
          add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
          convert => [ "[geoip][coordinates]", "float"]
        }
        date {
            match => [ "timestamp", "ISO8601" ]
        }
   }

if [type] == "pwa_mmtv" {
        grok {
            match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:loadbalancer} %{IP:client_ip}:%{NUMBER:client_port:int} (?:%{IP:backend_ip}:%{NUMBER:backend_port:int}|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:%{NUMBER:elb_status_code:int}|-) (?:%{NUMBER:backend_status_code:int}|-) %{NUMBER:received_bytes:int} %{NUMBER:sent_bytes:int} \"(?:%{WORD:verb}|-) (?:%{GREEDYDATA:request}|-) (?:HTTP/%{NUMBER:httpversion}|-( )?)\" \"%{DATA:userAgent}\"( %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol})?" ]
        }

        grok {
           match => [ "request", "%{URIPROTO:uri_proto}://(?:%{USER:user}(?::[^@]*)?@)?(?:%{URIHOST:uri_domain})?(?:%{URIPATHPARAM:uri_param})?" ]
         }
        if "?" in [uri_param] {
         grok {
           match => [ "uri_param", "%{GREEDYDATA:uri_path}\?%{GREEDYDATA:uri_query}" ]
          }
        }
        if !("?" in [uri_param])  {
        mutate{
                add_field => {"uri_path" => "%{uri_param}"}
        }
        }
        useragent {
         source => "userAgent"
        }
        geoip {
          source => "client_ip"
          target => "geoip"
          add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
          convert => [ "[geoip][coordinates]", "float"]
        }
        date {
            match => [ "timestamp", "ISO8601" ]
        }

   }

}
output {
        if [type]=="api" {
        elasticsearch {
        index => "%{type}-%{+YYYY-MM-dd}"
        hosts => ["http://172.24.22.6:9200"]
        }
        }
        if [type]=="smsv2" {
        elasticsearch {
        index => "%{type}-%{+YYYY-MM-dd}"
        hosts => ["http://172.24.22.6:9200"]
        }
        }
       if [type]=="contentstore" {
       elasticsearch {
       index => "%{type}-%{+YYYY-MM-dd}"
       hosts => ["http://172.24.22.6:9200"]
        }
        }
       if [type]=="pwa_mmtv" {
       elasticsearch {
       index => "%{type}-%{+YYYY-MM-dd}"
       hosts => ["http://172.24.22.6:9200"]
        }
        }
        }
